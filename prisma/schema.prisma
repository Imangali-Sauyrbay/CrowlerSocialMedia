// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id       Int     @id @default(autoincrement())
  email    String
  name     String?
  username String  @unique
  password String
  profile  String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  refresh_token RefreshToken[]
  crowls        Crowl[]
  avatar MediaFile?
}

model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  expires_at DateTime @default(now())

  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Crowl {
  id   Int    @id @default(autoincrement())
  text String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  author_id Int
  author    User @relation(fields: [author_id], references: [id])

  reply_to_id Int?

  replied_to Crowl?  @relation(name: "replies", fields: [reply_to_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  replies    Crowl[] @relation(name: "replies")

  medias MediaFile[]
}

model MediaFile {
  id       Int     @id @default(autoincrement())
  url      String?
  provider_public_id String?
  file_path String?
  name     String
  size     Int
  mime_type String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int? @unique
  user User? @relation(fields: [user_id], references: [id], onDelete: NoAction)

  crowl_id Int?
  crowl Crowl? @relation(fields: [crowl_id], references: [id], onDelete: SetNull)
}
